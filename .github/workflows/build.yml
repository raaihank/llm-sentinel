name: CI - Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Go ${{ matrix.go-version }} - Build & Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']

    env:
      CGO_ENABLED: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true

      - name: Verify Go installation
        run: |
          go version
          go env GOVERSION
          go env GOOS
          go env GOARCH

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: |
          echo "Running unit tests..."
          make test

      - name: Build binary
        run: |
          echo "Building LLM-Sentinel binary..."
          make build
          
      - name: Verify build artifacts
        shell: bash
        run: |
          echo "Checking build artifacts..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            test -f bin/sentinel.exe || (echo "Missing bin/sentinel.exe" && exit 1)
            echo "Windows binary created: bin/sentinel.exe"
          else
            test -f bin/sentinel || (echo "Missing bin/sentinel" && exit 1)
            echo "Unix binary created: bin/sentinel"
          fi
          echo "Build verification complete ✅"

      - name: Test binary execution
        shell: bash
        run: |
          echo "Testing binary execution..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./bin/sentinel.exe --version
            ./bin/sentinel.exe --help
          else
            ./bin/sentinel --version || true
            ./bin/sentinel --help || true
          fi
          echo "Binary execution test passed ✅"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-${{ matrix.os }}-go${{ matrix.go-version }}
          path: |
            bin/sentinel*
            configs/
          if-no-files-found: error
          retention-days: 7

      - name: Run govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest && govulncheck ./...

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build --build-arg CGO_ENABLED=0 -t llm-sentinel:test .

      - name: Test Docker image size
        run: |
          echo "Checking Docker image size..."
          docker images llm-sentinel:test
          SIZE=$(docker images llm-sentinel:test --format "table {{.Size}}" | tail -1)
          echo "Image size: $SIZE"

      - name: Test Docker container
        run: |
          echo "Starting Docker container..."
          docker run -d -p 8080:8080 --name test-container llm-sentinel:test

          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || (echo "Docker health check failed" && exit 1)

          # Test info endpoint
          echo "Testing info endpoint..."
          curl -f http://localhost:8080/info || (echo "Docker info check failed" && exit 1)

          # Test dashboard
          echo "Testing dashboard..."
          curl -f http://localhost:8080/ | grep -q "LLM-Sentinel" || (echo "Docker dashboard not loading" && exit 1)

          # Check container logs
          echo "Container logs:"
          docker logs test-container

          # Cleanup
          docker stop test-container
          docker rm test-container

          echo "Docker test passed ✅"

  lint:
    name: Go Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Check formatting
        run: |
          echo "Checking Go formatting..."
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Go files are not formatted. Run 'make fmt' to fix:"
            gofmt -s -l .
            exit 1
          fi
          echo "✅ All Go files are properly formatted"

      - name: Check mod tidy
        run: |
          echo "Checking go mod tidy..."
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "❌ go.mod or go.sum is not tidy. Run 'go mod tidy' to fix."
            exit 1
          fi
          echo "✅ go.mod and go.sum are tidy"

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt