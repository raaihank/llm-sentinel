name: CI - Tests Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Go ${{ matrix.go-version }} - Tests Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24']

    env:
      CGO_ENABLED: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          echo "Running Go tests..."
          make test

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          make test-coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-go${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html
          if-no-files-found: warn
          retention-days: 7

      - name: Build project
        run: |
          echo "Building project..."
          make build

      - name: Test PII Detection Engine
        run: |
          echo "Testing PII detection functionality..."
          
          # Build and start server in background
          ./bin/sentinel --config configs/default.yaml &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test PII detection via API
          echo "Testing PII masking..."
          RESPONSE=$(curl -s -X POST http://localhost:8080/ollama/api/generate \
            -H "Content-Type: application/json" \
            -d '{
              "model": "test", 
              "prompt": "My API key is sk-test123456789 and email is user@example.com and SSN is 123-45-6789",
              "stream": false
            }' || echo "API_ERROR")
          
          echo "Response: $RESPONSE"
          
          # Check if sensitive data was masked (should be in logs or response)
          if echo "$RESPONSE" | grep -q "sk-test123456789"; then
            echo "❌ API key not masked!"
            kill $SERVER_PID || true
            exit 1
          fi
          
          # Cleanup
          kill $SERVER_PID || true
          echo "✅ PII detection test passed"

      - name: Integration Test - Server Functionality
        run: |
          echo "Testing server startup and endpoints..."

          # Start server in background
          ./bin/sentinel --config configs/default.yaml &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8080/health || (echo "❌ Health check failed" && kill $SERVER_PID && exit 1)

          # Test info endpoint
          curl -f http://localhost:8080/info || (echo "❌ Info endpoint failed" && kill $SERVER_PID && exit 1)

          # Test dashboard loads
          curl -s http://localhost:8080/ | grep -q "LLM-Sentinel" || (echo "❌ Dashboard not loading" && kill $SERVER_PID && exit 1)

          # Test WebSocket endpoint (basic connection test)
          timeout 5s curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Sec-WebSocket-Key: test" -H "Sec-WebSocket-Version: 13" http://localhost:8080/ws || echo "WebSocket test completed"

          # Cleanup
          kill $SERVER_PID || true
          echo "✅ Integration tests passed"

      - name: Performance Test
        run: |
          echo "Running basic performance test..."
          
          # Start server
          ./bin/sentinel --config configs/default.yaml &
          SERVER_PID=$!
          sleep 5
          
          # Simple load test
          echo "Testing response times..."
          for i in {1..10}; do
            START_TIME=$(date +%s%3N)
            curl -s http://localhost:8080/health > /dev/null
            END_TIME=$(date +%s%3N)
            DURATION=$((END_TIME - START_TIME))
            echo "Request $i: ${DURATION}ms"
            
            # Fail if response time > 100ms
            if [ $DURATION -gt 100 ]; then
              echo "❌ Response time too slow: ${DURATION}ms"
              kill $SERVER_PID || true
              exit 1
            fi
          done
          
          kill $SERVER_PID || true
          echo "✅ Performance test passed"

  benchmark:
    name: Go Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          echo "Running Go benchmarks..."
          make benchmark || echo "No benchmarks found"

      - name: Memory usage test
        run: |
          echo "Testing memory usage..."
          
          # Start server and monitor memory
          ./bin/sentinel --config configs/default.yaml &
          SERVER_PID=$!
          sleep 10
          
          # Check memory usage (should be < 50MB)
          MEMORY_KB=$(ps -o rss= -p $SERVER_PID 2>/dev/null || echo "0")
          MEMORY_MB=$((MEMORY_KB / 1024))
          
          echo "Memory usage: ${MEMORY_MB}MB"
          
          if [ $MEMORY_MB -gt 50 ]; then
            echo "❌ Memory usage too high: ${MEMORY_MB}MB"
            kill $SERVER_PID || true
            exit 1
          fi
          
          kill $SERVER_PID || true
          echo "✅ Memory usage test passed: ${MEMORY_MB}MB"

  cross-platform:
    name: Cross-Platform Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true
          cache: true

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for $GOOS/$GOARCH..."
          
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="sentinel-$GOOS-$GOARCH.exe"
          else
            BINARY_NAME="sentinel-$GOOS-$GOARCH"
          fi
          
          go build -ldflags="-s -w" -o "$BINARY_NAME" ./cmd/sentinel
          
          echo "Built binary: $BINARY_NAME"
          ls -la "$BINARY_NAME"

      - name: Upload cross-platform binaries
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-${{ matrix.goos }}-${{ matrix.goarch }}
          path: sentinel-*
          if-no-files-found: error
          retention-days: 7